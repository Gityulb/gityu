一.走入Git
1.Git介绍
  Git是一个开源的分布式版本控制系统，用于敏捷高效处理任何小或大的项目

Git是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件
·版本控制
版本控制是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以恢复以前的版本的软件工程技术
2.Git对比SVN
  1).SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先是要从中央服务器得到最新的版本
     然后工作，完成工作后，需要把自己的代码推送到中央服务器。集中式版本控制系统是必须联网才能工作。
  2).Git分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上，
     可以离线工作
二.Git常用命令
1.设置用户签名
  签名的作用就是用来标识用户，以区分不同的开发人员
  git config --global user.email "you@example.com"
  git config --global user.name "Your name"
2.初始化本地库
  我们希望一个文件夹被git管理的话，那么就要在一个文件夹下进行git初始化
  找到一个希望被git管理的文件夹
  在文件夹内单击鼠标右键，点开git Bash Here
  输入指令
# git 初始化指令
  git init
3.git add指令
  # 我们要放入暂存区，要使用 git add 指令
  #把单独一个文件放在暂存区
#把文件下的css文件夹放在暂存区
  git add css/
  #把所有文件都放在暂存区
  git add --all
  #git add --all有一个简单写法
  git add .
4.git commit
  #把暂存区的内容放在历史区
  git commit -m "我是第一个版本"
我们使用git log这个指令查看版本信息
  #查看历史区版本信息
  git log
我们使用git reset --hard版本号进行历史回退
  #回到上一次提交的版本
  git reset --hard HEAD^
  #回到上上次提交的版本
  git reset --hard HEAD^^
  git reset --hard HEAD~2
5.git revert 与 git reset
  git reset 是滚回到对应的commit-id，相当于是删除了commit-id以后是所以的提交，并且不会产生新的commit-id记录，如果要推送到远程服务的话，需要强制推送-f
  git revert 是反做撤销其中的commit-id，然后重新生成一个commit-id，本身不会对其他的提交commit-id产生影响，如果要推送到远程服务的话，就普通的操作git push就好了
三.git分支
1.初始分支
  git分支，就是我们自己把我们的整个文件夹分成一个一个独立的区域
    比如我在开发登录功能的时候，可以放在login分支下进行开发
    大家互不干扰，每个功能都是一个独立的功能分支
  ·这样开发就会好很多
  ·git在初始化的时候，会自动生成一个分支，叫做master
  ·是表示主要分支的意思
  ·我们就可以自己开辟很多独立分支
2.创建分支
  开辟一个分支使用git branch分支名称指令
  #开辟一个login分支
  git branch login
  查看一下当前分支情况
  #查看以下当前分支情况
  git branch
  会看到，当前有两个分支
  一个是master，一个是login
  前面有个*号，并且有高亮显示，表示你当前所处的分支
3.切换分支
  我们对登陆功能的开发要移动到login分支去完成
  我们切换所处分支使用git checkout 分支名称
  #切换到login分支
  git checkout login
  然后我们在整个分支上进行登录功能开发
  开发完毕后，我们就在当前分支上进行提交
  提交以后我们进行分支切换
    发现master上面还是最初始的状态
    而login分支上把当前所有功能
  我们按照分支 把所有功能都开发完毕后
    只要把所有代码都合并到master主分支上就行了
4.合并分支
  git的合并分支，只能把别的分支内容合并到自己分支上
  使用的指令是git merge
  #切换到master分支
  git checkout master
  #把login的内容合并到自己的分支
  git merge login
  这个时候，我们刚才在login上开发的东西都到了master分支上
  如果是多个分支的话，那么所有的最后合并到master分支的时候
  我们的主分支上就是完整网站的所有页面
    各个分支上都是单独的页面功能
5.删除分支
  这个时候，我们刚才分劈的分支就没有什么作用了，就可以删除分支了
    1.先切换到别的分支
    2.使用指令git branch -d 分支名称 来删除
  #先切换到别的分支
  git checkout master
  #删除login分支
  git branch -d login